[{"/Users/ops/PROG/React:Redux/React-Weather/src/index.js":"1","/Users/ops/PROG/React:Redux/React-Weather/src/Components/Wether/index.js":"2"},{"size":333,"mtime":1610402248139,"results":"3","hashOfConfig":"4"},{"size":2517,"mtime":1610404823076,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"mj1uym",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/ops/PROG/React:Redux/React-Weather/src/index.js",[],["12","13"],"/Users/ops/PROG/React:Redux/React-Weather/src/Components/Wether/index.js",["14","15","16"],"import React, { Fragment } from \"react\";\nimport \"./index.css\";\nimport axios from \"axios\";\nimport ReactDOM from \"react-dom\";\n\nclass Weather extends React.Component {\n  API_URL = `https://api.openweathermap.org/data/2.5/weather?q=rivne&appid=c1fb2275690ca17e568dd7636b4f9511&lang=ua&units=metric`;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      weather: \"\",\n      location: \"\",\n      temp: \"\",\n      time: \"\",\n      date: \"\",\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(this.API_URL)\n      .then((res) => {\n        console.log(res.data);\n        this.setState({\n          items: res.data,\n          weather: res.data.weather[0].description,\n          location: res.data.name,\n          temp: res.data.main.temp,\n        });\n      })\n      .catch((err) => console.log(err.responceText));\n\n    setInterval(() => {\n      var days = [\n        \"Неділя\",\n        \"Понеділок\",\n        \"Вівторок\",\n        \"Середа\",\n        \"Четвер\",\n        \"П'ятниця\",\n        \"Субота\",\n      ];\n      var months = [\n        \"Січня\",\n        \"Лютого\",\n        \"Березеня\",\n        \"Квітня\",\n        \"Травня\",\n        \"Червня\",\n        \"Липня\",\n        \"Серпня\",\n        \"Вересеня\",\n        \"Жовтня\",\n        \"Листопада\",\n        \"Грудня\",\n      ];\n\n      const myDate = new Date();\n      const fullDate =\n        days[myDate.getDay()] +\n        \", \" +\n        myDate.getDate() +\n        \" \" +\n        months[myDate.getMonth()] +\n        \" \" +\n        myDate.getFullYear() +\n        \" року\";\n\n      this.setState({\n        time: new Date().toLocaleTimeString(),\n        date: fullDate,\n      });\n    }, 1000);\n  }\n\n  render() {\n    // console.log(\"STATE\", this.state);\n\n    const { items, location, weather, temp, time, date } = this.state;\n    // console.log(\"ITEMS\", items);\n\n    return (\n      <div className=\"container-fluid px-1 px-md-4 py-5 mx-auto\">\n        <div className=\"row d-flex justify-content-center px-3\">\n          <div className=\"card\">\n            <h2 className=\"ml-auto mr-4 mt-3 mb-0\">{ location }</h2>\n            <p className=\"ml-auto mr-4 mb-0 med-font\">{ weather }</p>\n            <h1 className=\"ml-auto mr-4 large-font\">{ temp }&#176;</h1>\n            <p className=\"time-font mb-0 ml-4 mt-auto\">{ time }</p>\n            <p className=\"ml-4 mb-4\">{date}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":1,"column":17,"nodeType":"23","messageId":"24","endLine":1,"endColumn":25},{"ruleId":"21","severity":1,"message":"25","line":4,"column":8,"nodeType":"23","messageId":"24","endLine":4,"endColumn":16},{"ruleId":"21","severity":1,"message":"26","line":81,"column":13,"nodeType":"23","messageId":"24","endLine":81,"endColumn":18},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'items' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]